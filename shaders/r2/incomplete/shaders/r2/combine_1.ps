#include "common.h"
#include "hmodel.h"

struct	_out
{
	half4	low	: COLOR0;
	half4	high	: COLOR1;
};

_out 	main		( p_screen I )
{
  	// Sample the buffers:
  	half4 P 	= tex2D 	(s_position, 	I.tc0);
  	half4 N 	= tex2D 	(s_normal,	I.tc0);		// normal.material
  	half4 D		= tex2D		(s_diffuse,	I.tc0);		// rgb.gloss
  	half4 L 	= tex2D		(s_accumulator, I.tc0);		// diffuse.specular

	/*
	_out	d;
	d.low 		= D;
	d.high 		= 0;
	return 	d;
	*/

		// D.rgb	= .75h		;	//..
#ifdef  FORCE_GLOSS		
		D.w	= FORCE_GLOSS	;
#endif

#ifdef 	USE_GAMMA_22
	D.rgb		= (D.rgb*D.rgb);	// pow(2.2)
#endif
	// hemisphere
	half3 		hdiffuse,hspecular;
	hmodel 		(hdiffuse, hspecular, P.w, N.w, D.w, P.xyz, N.xyz);

  	half4 	light 	= half4 	(L.rgb + hdiffuse + L_ambient.rgb, L.w);
  	half4 	C	= D*light;					// rgb.gloss * light(diffuse.specular)
#ifdef 	USE_SPECULAR_RGB
  	half3 	color 	= C.rgb+2.h*C.w*normalize(.5h+C.rgb);		// use diffuse*light as astimation of specular color
#else
  	half3 	color 	= C.rgb + C.www + hspecular;			// replicated specular
#endif
		//.
		//.color.rgb 	= N.w;	//hdiffuse+hspecular;	// N.xyz*0.5h+0.5h;	// 

	// here should be distance fog
	half 	distance	= length	(P.xyz);
	half 	fog 		= saturate	(distance*fog_params.w + fog_params.x);
		color		= lerp		(color,fog_color,fog);

	// here should be blending into skydome

	// final tone-mapping
	_out	o;
	tonemap	(o.low,o.high, color, tex2D(s_tonemap,I.tc0).x);
  	return 	o;
}
